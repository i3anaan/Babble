SelfTest [
    arr [
        { #foo, #bar, nil, #baz }.
    ].

    emptyArr [
        { }.
    ].
    testArrays [
        | x |.
        x := {}.
    ].

    testArrayAt [
        (this arr at: 1 == #bar) assert.
        (this arr at: 0 == #bar) not assert.
    ].

    testArrayAtPut [
        | z |.
        z := { 1, 2, 3 }.
        z at: 1 put: 4.

        (z at: 0 == 1) assert.
        (z at: 1 == 4) assert.
        (z at: 2 == 3) assert.
    ].

    testArraySize [
        (this arr size == 4) assert.
        (this emptyArr size == 0) assert.
    ].

    testArrayIsEmpty [
        this arr isEmpty not assert.
        this emptyArr isEmpty assert.
    ].

    testArrayNotEmpty [
        this arr notEmpty assert.
        this emptyArr notEmpty not assert.
    ].

    testArrayAdd [
        | array |.
        array := { 1, 2, 3 }.
        array add: 4.

        (array size == 4) assert.
        (array at: 3 == 4) assert.
    ].

    testArrayAddAll [
        | a b |.
        a := { 1, 2 }.
        b := { 3, 4 }.

        a addAll: b.

        (a size == 4) assert.
    ].

    testArrayFirst [
        (this arr first == #foo) assert.
    ].

    testArrayLast [
        (this arr last == #baz) assert.
    ].

    testArrayIncludes [
        (this arr includes: #foo) assert.
        (this arr includes: #spam) not assert.
    ].

    testArrayReverse [
        (this arr reverse first == #baz) assert.
    ].

    testArrayAsString [
        ({1, 2, 3} asString == "[1, 2, 3]") assert.
    ].
    
    testArrayMixed [
        | int str duck sym array |.
        int := 0.
        str := "one".
        duck := Duck new.
        sym := #three.
        array := {int, str, duck, sym}.
        (array at: 0 == int) assert.
        (array at: 1 == str) assert.
        (array at: 2 class name == "Duck") assert.
        (array at: 3 == sym) assert.
    ].
].
