/**
 * SelfTest.bla
 * Integration tests for the Babble language.
 */

Animal [
].

Duck extends: Animal [
].

SelfTest [
    testAssert [
        true assert.
        false not assert.
    ].
    
    testEmptyMethod [
        (this emptyMethod == nil) assert.
    ].
    
    emptyMethod [].

    testOr [
        true or:true assert.
        true or:false assert.
        false or:true assert.
        false or:false not assert.
    ].

    testAnd [
        true and:true assert.
        true and:false not assert.
        false and:true not assert.
        false and:false not assert.
    ].

    testAsString [
        (true asString == "true") assert.
        (false asString == "false") assert.
    ].

    testMaths [
        (10 == 10) assert.
        (10 > 5) assert.
        (10 negate == -10) assert.
        (10 + 10 == 20) assert.
        (20 / 10 == 2) assert.
        (3 + 4 * 5 == 35) assert.
        (3 + (4 * 5) == 23) assert.
        (-10 abs == 10) assert.
    ].

    testStrings [
        ("hello" == "hello") assert.
        ("WORLD" lower == "world") assert.
        ("con" + "cat" + "e" + "nation" == "concatenation") assert.
        ("string replacement" replace: "re" with: "dis" == "string displacement") assert.
    ].

    testSymbols [
        (#Monday == #Monday) assert.
        (#Monday asString == "#Monday") assert.
        (#Tuesday asString == "#Tuesday") assert.
        (#Monday asInt != #Tuesday asInt) assert.
        (#Monday asInt == #Monday asInt) assert.
    ].

    testThis [
        this someMethod assert.
    ].

    someMethod [
        true.
    ].

    testAdd [
        (this add:10 to:20 == 30) assert.
    ].

    add:left to:right [
        left + right.
    ].

    testBlocks [
        [ true ] value assert.
        [ false ] value not assert.
    ].

    testNestedBlocks [
        ([ [ [ [ 10 ] value. ] value. ] value. ] value == 10) assert.
    ].

    testIf [
        (true  ifTrue: [ #yea ] == #yea) assert.
        (false ifTrue: [ #yea ] == nil) assert.

        (true  ifFalse: [ #yea ] == nil) assert.
        (false ifFalse: [ #yea ] == #yea) assert.

        (true  ifTrue: [ #a ] ifFalse: [ #b ] == #a) assert.
        (false ifTrue: [ #a ] ifFalse: [ #b ] == #b) assert.
    ].

    testVarDecl [
        | x |.
        x := 2.
        (x == 2) assert.
        | y z |.
        z := 5.
        (z == 5) assert.
    ].

    arr [
        { #foo, #bar, nil, #baz }.
    ].

    emptyArr [
        { }.
    ].

    testArrays [
        | x |.
        x := {}.
    ].

    testArrayAt [
        (this arr at: 1 == #bar) assert.
        (this arr at: 0 == #bar) not assert.
    ].

    testArrayAtIfAbsent [
        (this arr at: 2 ifAbsent: #eggs == #eggs) assert.
    ].

    testArrayAtPut [
        | z |.
        z := { 1, 2, 3 }.
        z at: 1 put: 4.

        (z at: 0 == 1) assert.
        (z at: 1 == 4) assert.
        (z at: 2 == 3) assert.
    ].

    testArraySize [
        (this arr size == 4) assert.
        (this emptyArr size == 0) assert.
    ].

    testArrayIsEmpty [
        this arr isEmpty not assert.
        this emptyArr isEmpty assert.
    ].

    testArrayNotEmpty [
        this arr notEmpty assert.
        this emptyArr notEmpty not assert.
    ].

    testArrayAdd [
        | array |.
        array := { 1, 2, 3 }.
        array add: 4.

        (array size == 4) assert.
        (array at: 3 == 4) assert.
    ].

    testArrayAddAll [
        | a b |.
        a := { 1, 2 }.
        b := { 3, 4 }.

        a addAll: b.

        (a size == 4) assert.
    ].

    testArrayFirst [
        (this arr first == #foo) assert.
    ].

    testArrayLast [
        (this arr last == #baz) assert.
    ].

    testArrayIncludes [
        (this arr includes: #foo) assert.
        (this arr includes: #spam) not assert.
    ].

    testArrayReverse [
        (this arr reverse first == #baz) assert.
    ].

    testArrayAsString [
        ({1, 2, 3} asString == "[1, 2, 3]") assert.
    ].

    main [
        "Please use `mvn verify` to run integration tests." print.
    ].
].
