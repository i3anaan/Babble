/**
 * SelfTest.bla
 * Integration tests for the Babble language.
 */

Animal [
    canSwim [ false ].
].

Duck extends: Animal [
    canSwim [ true ].
    quack   [ "Quack!" ].
].

Light [
    | on |.

    isOn    [ nil != on ].
    isOff   [ nil == on ].

    turnOn  [ on := true ].
    turnOff [ on := nil ].

    asString [
        this isOn ifTrue: [ "On!" ] ifFalse: [ "Off." ]
    ].
].

Fielder [
    | x y |.
].

SelfTest [
    | field1 field2 |.

    testAssert [
        true assert.
        false not assert.
    ].

    testEmptyMethod [
        (this emptyMethod == nil) assert.
    ].

    emptyMethod [].

    testOr [
        true or:true assert.
        true or:false assert.
        false or:true assert.
        false or:false not assert.
    ].

    testAnd [
        true and:true assert.
        true and:false not assert.
        false and:true not assert.
        false and:false not assert.
    ].

    testAsString [
        (true asString == "true") assert.
        (false asString == "false") assert.
    ].

    testMaths [
        (10 == 10) assert.
        (10 > 5) assert.
        (10 negate == -10) assert.
        (10 + 10 == 20) assert.
        (20 / 10 == 2) assert.
        (3 + 4 * 5 == 35) assert.
        (3 + (4 * 5) == 23) assert.
        (-10 abs == 10) assert.
    ].

    testStrings [
        ("hello" == "hello") assert.
        ("WORLD" lower == "world") assert.
        ("con" + "cat" + "e" + "nation" == "concatenation") assert.
        ("string replacement" replace: "re" with: "dis" == "string displacement") assert.
    ].

    testSymbols [
        (#Monday == #Monday) assert.
        (#Monday asString == "#Monday") assert.
        (#Tuesday asString == "#Tuesday") assert.
        (#Monday asInt != #Tuesday asInt) assert.
        (#Monday asInt == #Monday asInt) assert.
    ].

    testThis [
        this someMethod assert.
    ].

    someMethod [
        true.
    ].

    testAdd [
        (this add:10 to:20 == 30) assert.
    ].

    add:left to:right [
        left + right.
    ].

    testBlocks [
        [ true ] value assert.
        [ false ] value not assert.
    ].

    testNestedBlocks [
        ([ [ [ [ 10 ] value. ] value. ] value. ] value == 10) assert.
    ].

    testClosureRead [
        | x |.

        x := 10.

        [ x == 10 ] value assert.
    ].

    testClosureWrite [
        | a b |.

        a := Light new.
        b := Light new.

        [ a turnOn ] value.

        a isOn assert.
        b isOff assert.
    ].

    testClosurePass [
        | closure value |.

        closure := this alpha.
        value := this beta: closure.

        (value == 10) assert.
    ].

    alpha [
        | x |.
        x := 10.
        [ x ]
    ].

    beta: cls [
        cls value.
    ].

    testClosureIncrementer [
        | a b |.
        a := this gamma.
        b := this gamma.

        (a value == 1) assert.
        (a value == 2) assert.
        (a value == 3) assert.

        (b value == 1) assert.
    ].

    gamma [
        | x |.
        x := 0.

        [ x := x + 1 ]
    ].

    testIf [
        (true  ifTrue: [ #yea ] == #yea) assert.
        (false ifTrue: [ #yea ] == nil) assert.

        (true  ifFalse: [ #yea ] == nil) assert.
        (false ifFalse: [ #yea ] == #yea) assert.

        (true  ifTrue: [ #a ] ifFalse: [ #b ] == #a) assert.
        (false ifTrue: [ #a ] ifFalse: [ #b ] == #b) assert.
    ].

    testVarDecl [
        | x |.
        x := 2.
        (x == 2) assert.
        | y z |.
        z := 5.
        (z == 5) assert.
    ].

    arr [
        { #foo, #bar, nil, #baz }.
    ].

    emptyArr [
        { }.
    ].

    testArrays [
        | x |.
        x := {}.
    ].

    testArrayAt [
        (this arr at: 1 == #bar) assert.
        (this arr at: 0 == #bar) not assert.
    ].

    testArrayAtPut [
        | z |.
        z := { 1, 2, 3 }.
        z at: 1 put: 4.

        (z at: 0 == 1) assert.
        (z at: 1 == 4) assert.
        (z at: 2 == 3) assert.
    ].

    testArraySize [
        (this arr size == 4) assert.
        (this emptyArr size == 0) assert.
    ].

    testArrayIsEmpty [
        this arr isEmpty not assert.
        this emptyArr isEmpty assert.
    ].

    testArrayNotEmpty [
        this arr notEmpty assert.
        this emptyArr notEmpty not assert.
    ].

    testArrayAdd [
        | array |.
        array := { 1, 2, 3 }.
        array add: 4.

        (array size == 4) assert.
        (array at: 3 == 4) assert.
    ].

    testArrayAddAll [
        | a b |.
        a := { 1, 2 }.
        b := { 3, 4 }.

        a addAll: b.

        (a size == 4) assert.
    ].

    testArrayFirst [
        (this arr first == #foo) assert.
    ].

    testArrayLast [
        (this arr last == #baz) assert.
    ].

    testArrayIncludes [
        (this arr includes: #foo) assert.
        (this arr includes: #spam) not assert.
    ].

    testArrayReverse [
        (this arr reverse first == #baz) assert.
    ].

    testArrayAsString [
        ({1, 2, 3} asString == "[1, 2, 3]") assert.
    ].

    testMetaclassName [
        (true class name == "True") assert.
        (true class class name == "Class") assert.
        (true class class class name == "Class") assert.
    ].

    testRespondsTo [
        (this class respondsTo:"main") assert.
        (this class respondsTo:"bogusMethod") not assert.
    ].
    testClassMerging [
        this isTrue assert.
        this isFalse not assert.
    ].

    testNew [
        (true class new) assert.
    ].

    testDuck [
        | bob |.
        bob := Duck new.

        (bob class name == "Duck") assert.
        (bob quack == "Quack!") assert.
        (bob canSwim) assert.
    ].

    testRedefineDuck [
        | Duck |.
        Duck := 10.
        (Duck == 10) assert.
    ].
    
    testClassMergingAssign [
        this separatedAssign.
        field1 assert.
        field2 not assert.
    ].
    
    testClassMergingFields [
        field3 := 10.
    ].
    
    testVarception [
        | x y z |.
        x := y := z:= 10.
        this varception1.
        (x == 10) assert.
        (y == 10) assert.
        (z == 10) assert.
    ].
    
    varception1 [
        | x y |.
        x := y := 20.
        this varception2.
        (x == 20) assert.
        (y == 20) assert.
    ].
    
    varception2 [
        | x |.
        x := 30.
        (x == 30) assert.
    ].
    
    testClassFields [
        field1 := 10.
        field2 := 20.
        
        (field1 == 10) assert.
        (field2 == 20) assert.
    ].
    
    testClassFieldsOverride [
        field1 := 10.
        field2 := 20.
        
        this setClassFields.
        this checkClassFields.
    ].
    
    setClassFields [
        | field1 |.
        
        field1 := 30.
        field2 := 30.
    ].
    
    checkClassFields [
        (field1 == 10) assert.
        (field2 == 30) assert.
    ].
    
    testClassFieldsOther [
        "TestClassFieldsOther: TODO Add when new objects can be created." print.
    ].
    
    main [
        "Please use `mvn verify` to run integration tests." print.
        this testAdd.
        this testAnd.
        this testArrayAdd.
        this testArrayAddAll.
        this testArrayAsString.
        this testArrayAt.
        this testArrayAtIfAbsent.
        this testArrayAtPut.
        this testArrayFirst.
        this testArrayIncludes.
        this testArrayIsEmpty.
        this testArrayLast.
        this testArrayNotEmpty.
        this testArrayReverse.
        this testArraySize.
        this testArrays.
        this testAsString.
        this testAssert.
        this testBlocks.
        this testClassFields.
        this testClassFieldsOther.
        this testClassFieldsOverride.
        this testEmptyMethod.
        this testIf.
        this testMaths.
        this testMetaclassName.
        this testNestedBlocks.
        this testOr.
        this testRespondsTo.
        this testStrings.
        this testSymbols.
        this testThis.
        this testVarDecl.
        this testVarception.
        "Main tests: OK" print.
    ].
].

SelfTest [
	| field3 |.
	
    isTrue [
        true.
    ].
    
    isFalse [
        false.
    ].
    
    separatedAssign [
        field1 := true.
        field2 := false.
    ].
].
