/**
 * SelfTest.bla
 * Integration tests for the Babble language.
 */

Animal [
].

Duck extends: Animal [
].

Fielder [
	| x y |.
].

SelfTest [
    | field1 field2 |.

    testAssert [
        true assert.
        false not assert.
    ].

    testOr [
        true or:true assert.
        true or:false assert.
        false or:true assert.
        false or:false not assert.
    ].

    testAnd [
        true and:true assert.
        true and:false not assert.
        false and:true not assert.
        false and:false not assert.
    ].

    testAsString [
        (true asString == "true") assert.
        (false asString == "false") assert.
    ].

    testMaths [
        (10 == 10) assert.
        (10 > 5) assert.
        (10 negate == -10) assert.
        (10 + 10 == 20) assert.
        (20 / 10 == 2) assert.
        (3 + 4 * 5 == 35) assert.
        (3 + (4 * 5) == 23) assert.
        (-10 abs == 10) assert.
    ].

    testStrings [
        ("hello" == "hello") assert.
        ("WORLD" lower == "world") assert.
        ("con", "cat", "e", "nation" == "concatenation") assert.
        ("string replacement" replace: "re" with: "dis" == "string displacement") assert.
    ].

    testSymbols [
        (#Monday == #Monday) assert.
        (#Monday asString == "#Monday") assert.
        (#Tuesday asString == "#Tuesday") assert.
        (#Monday asInt != #Tuesday asInt) assert.
        (#Monday asInt == #Monday asInt) assert.
    ].

    testTruthy [
        (true asBool) assert.
        (10 asBool) assert.
        ("hello" asBool) assert.
        (#symbol asBool) assert.
    ].

    testFalsy [
        (false asBool not) assert.
        (nil asBool not) assert.
        (0 asBool not) assert.
        ("" asBool not) assert.
    ].

    testThis [
        this someMethod assert.
    ].

    someMethod [
        true.
    ].

    testBlocks [
        [ true ] value assert.
        [ false ] value not assert.
    ].

    testNestedBlocks [
        ([ [ [ [ 10 ] value. ] value. ] value. ] value == 10) assert.
    ].

    testIf [
        (true  ifTrue: [ #yea ] == #yea) assert.
        (false ifTrue: [ #yea ] == nil) assert.

        (true  ifFalse: [ #yea ] == nil) assert.
        (false ifFalse: [ #yea ] == #yea) assert.

        (true  ifTrue: [ #a ] ifFalse: [ #b ] == #a) assert.
        (false ifTrue: [ #a ] ifFalse: [ #b ] == #b) assert.
    ].

    testVarDecl [
        | x |.
        x := 2.
        (x == 2) assert.
        | y z |.
        z := 5.
        (z == 5) assert.
    ].
    
    testVarception [
        | x y z |.
        x := y := z:= 10.
        this varception1.
        (x == 10) assert.
        (y == 10) assert.
        (z == 10) assert.
    ].
    
    varception1 [
        | x y |.
        x := y := 20.
        this varception2.
        (x == 20) assert.
        (y == 20) assert.
    ].
    
    varception2 [
        | x |.
        x := 30.
        (x == 30) assert.
    ].
    
    testClassFields [
        field1 := 10.
        field2 := 20.
        
        (field1 == 10) assert.
        (field2 == 20) assert.
    ].
    
    testClassFieldsOverride [
        field1 := 10.
        field2 := 20.
        
        this setClassFields.
        this checkClassFields.
    ].
    
    setClassFields [
        | field1 |.
        
        field1 := 30.
        field2 := 30.
    ].
    
    checkClassFields [
        (field1 == 10) assert.
        (field2 == 30) assert.
    ].
    
    testClassFieldsOther [
        "TestClassFieldsOther: TODO Add when new objects can be created." print.
    ].
    
    main [
        "Please use `mvn verify` to run integration tests." print.
        this testAssert.
        this testOr.
        this testAnd.
        this testMaths.
        this testStrings.
        this testSymbols.
        this testTruthy.
        this testFalsy.
        this testVarDecl.
        this testVarception.
        this testClassFields.
        this testClassFieldsOverride.
        this testClassFieldsOther.
        "Main tests: OK" print.
    ].
].
